on_actions = {
	on_startup = {
		effect = {
			log = "[GetDateText] MustaphaTR's Every State Independent main on_startup begin"

			every_country = {
				if = {
					limit = { is_ai = no }

					randomised_preset_effects = yes # set min_max values to match the randomised preset so events work fine as well
					default_preset_effects = yes
					setup_other_setup_variables = yes
					get_total_manpower = yes
					set_variable = { global.og_per_state_pop = global.per_state_pop }
					set_variable = { global.og_per_state_pop_half = global.per_state_pop }
					divide_variable = { global.og_per_state_pop_half = 2 }
					
					if = {
						limit = { NOT = { original_tag = OOO } }

						set_variable = { esicolor_welcome_screen = 1 }
						set_variable = { esicolor_setup_screen = 0 }
					}
				}

				set_variable = { THIS.dynamic_pp_gain_modifier = 0 }
				set_variable = { THIS.dynamic_civ_factory_use = 0 }

				add_ideas = aggressive_ai
				add_dynamic_modifier = {
					modifier = esicolor_state_management_modifier
				}

				setup_generic_advisor_portraits = yes
				recalculate_recruitment_costs = yes # It will be 0, but just in case i add starting generals anywhere.
				
				if = {
					limit = {
						democratic < 0.26
						fascism < 0.26
						communism < 0.26
						neutrality < 0.26
					}

					randomise_ideology_and_popularity = yes
				}

				set_variable = { THIS.original_capital = THIS.capital_scope }
				set_variable = { THIS.original_ideology = THIS.current_party_ideology_group }
			}

			# Artillery designer for Swiss Plateau. There are two available, so select one to use.
			random_list = {
				seed = random
				50 = { set_global_flag = OOE_arty_EWF }
				50 = { }
			}
			# Motorised designer for Lower Austria. There are two available, so select one to use.
			random_list = {
				seed = random
				50 = { set_global_flag = OOA_motor_OSW }
				50 = { }
			}
			# Battlefleet designer for Litorale. There are two available, so select one to use.
			random_list = {
				seed = random
				50 = { set_global_flag = FEL_battlefleet_STT }
				50 = { }
			}

			every_state = {
				set_variable = { THIS.original_owner = THIS.owner }
			}
		}
	}

	on_peaceconference_ended = {
		effect = {
			log = "[GetDateText] MustaphaTR's Every State Independent main on_peaceconference_ended begin"

			adjust_state_names = yes
		}
	}

	on_state_control_changed = {
		effect = {
			log = "[GetDateText] MustaphaTR's Every State Independent main on_state_control_changed begin"

			adjust_state_names_on_state_core_changed = yes
		}
	}

	on_ruling_party_change = {
		effect = {
			log = "[GetDateText] MustaphaTR's Every State Independent main on_ruling_party_change begin"

			adjust_state_names_on_ruling_party_change = yes

			if = {
				limit = { has_global_flag = leader_traits_disabled }

				clear_leader_traits = yes
			}

			if = {
				limit = { has_character = ZIF_iosif_stalin }

				if = {
					limit = { has_government = neutrality }

					ZIF_iosif_stalin = {
						set_character_name = ZIF_tsar_joseph_i

						set_portraits = {
							civilian = {
								large = "GFX_portrait_SOV_tsar_stalin"
							}
							army = {
								large = "GFX_portrait_SOV_tsar_stalin"
							}
						}
					}

					else = {
						ZIF_iosif_stalin = {
							set_character_name = SOV_iosif_stalin

							set_portraits = {
								civilian = {
									large = "GFX_portrait_SOV_iosif_stalin"
								}
								army = {
									large = "GFX_portrait_SOV_iosif_stalin"
								}
							}
						}
					}
				}
			}
		}
	}

	on_unit_leader_promote_from_ranks_veteran = { #Unit leader scope, FROM is unit
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_unit_leader_promote_from_ranks_veteran"
			owner = {
				set_temp_variable = {
					creator = THIS
				}
			}
			handle_special_generals = yes
		}
	}

	on_unit_leader_promote_from_ranks_green = { #Unit leader scope, FROM is unit
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_unit_leader_promote_from_ranks_green"
			owner = {
				set_temp_variable = {
					creator = THIS
				}
			}
			handle_special_generals = yes
		}
	}

	on_unit_leader_created = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_unit_leader_created"

			FROM = {
				set_temp_variable = {
					creator = THIS
				}
			}
			if = {
				limit = {
					is_army_leader = yes
					NOT = { has_dlc = "By Blood Alone" }
				}

				handle_special_generals = yes
			}
			else_if = {
				limit = {
					is_navy_leader = yes
				}

				handle_special_admirals = yes
			}
		}
	}

	on_daily = {
		effect = {
			log = "[GetDateText] MustaphaTR's Every State Independent main on_daily begin for [Root.GetName]"

			for_each_loop = {
				array = ROOT.states_being_claimed

				if = {
					limit = {
						check_variable = { ROOT.claim_timer_@var:v < 2 }
					}

					var:v = {
						claim_action_effect = yes
					}

					add_to_variable = { ROOT.dynamic_pp_gain_modifier = 0.1 }
					clamp_variable = {
						var = ROOT.dynamic_pp_gain_modifier
						max = 0
						min = -2000
					}
					remove_from_array = {
						array = ROOT.states_being_claimed
						index = i
					}
				}
				else = {
					subtract_from_variable = { ROOT.claim_timer_@var:v = 1 }
				}
			}
			for_each_loop = {
				array = ROOT.states_getting_compliance

				if = {
					limit = {
						check_variable = { ROOT.compliance_timer_@var:v < 2 }
					}

					var:v = {
						add_compliance = 10
					}

					subtract_from_variable = { ROOT.dynamic_civ_factory_use = 1 }
					clamp_variable = {
						var = ROOT.dynamic_civ_factory_use
						min = 0
						max = 2000
					}
					remove_from_array = {
						array = ROOT.states_getting_compliance
						index = i
					}
				}
				else = {
					subtract_from_variable = { ROOT.compliance_timer_@var:v = 1 }
				}
			}
			for_each_loop = {
				array = ROOT.states_being_cored_normal

				if = {
					limit = {
						check_variable = { ROOT.core_timer_@var:v < 2 }
					}

					var:v = {
						add_core_of = ROOT
					}

					add_to_variable = { ROOT.dynamic_pp_gain_modifier = 0.25 }
					clamp_variable = {
						var = ROOT.dynamic_pp_gain_modifier
						max = 0
						min = -2000
					}
					remove_from_array = {
						array = ROOT.states_being_cored_normal
						index = i
					}
				}
				else = {
					subtract_from_variable = { ROOT.core_timer_@var:v = 1 }
				}
			}
			for_each_loop = {
				array = ROOT.states_being_cored_formable

				if = {
					limit = {
						check_variable = { ROOT.core_timer_@var:v < 2 }
					}

					var:v = {
						add_core_of = ROOT
					}

					add_to_variable = { ROOT.dynamic_pp_gain_modifier = 0.125 }
					clamp_variable = {
						var = ROOT.dynamic_pp_gain_modifier
						max = 0
						min = -2000
					}
					remove_from_array = {
						array = ROOT.states_being_cored_formable
						index = i
					}
				}
				else = {
					subtract_from_variable = { ROOT.core_timer_@var:v = 1 }
				}
			}
		}
	}

	#on_weekly = { #TODO, split all the AIs to 7 groups and run them at different days of the week.
	#	effect = {
	#		log = "[GetDateText] MustaphaTR's Every State Independent main on_weekly begin for [Root.GetName]"
	#
	#		if = {
	#			limit = {
	#				NOT = {
	#					original_tag = OOO
	#					has_global_flag = state_management_disabled
	#					is_ai = no
	#					# has_states_to_form_lv2_or_lv3_formable = yes
	#				}
	#			}
	#
	#			# First, we check if we have something to core
	#			if = {
	#				limit = {
	#					has_political_power > 29
	#					political_power_daily > 0.125
	#
	#					any_owned_state = { # seems like any_owned_controlled_state isn't a thing, it is not on wiki at least.
	#						is_controlled_by = ROOT
	#
	#						NOT = {
	#							is_core_of = ROOT
	#
	#							is_in_array = { ROOT.states_being_cored_formable = THIS }
	#							is_in_array = { ROOT.states_being_cored_normal = THIS }
	#						}
	#
	#						compliance > 20
	#						is_in_array = { ROOT.formable_cores = THIS }
	#					}
	#				}
	#
	#				random_owned_controlled_state = {
	#					limit = {
	#						compliance > 20
	#						is_in_array = { ROOT.formable_cores = THIS }
	#					}
	#
	#					add_to_array = { ROOT.states_being_cored_formable = THIS }
	#					ROOT = { add_political_power > -30 }
	#					subtract_from_variable = { ROOT.dynamic_pp_gain_modifier = 0.125 }
	#					set_variable = { ROOT.core_timer_@THIS = global.coring_formable_length?30 }
	#				}
	#			}
	#			else_if = {
	#				limit = {
	#					has_political_power > 59
	#					political_power_daily > 0.25
	#
	#					any_owned_state = {
	#						is_controlled_by = ROOT
	#
	#						NOT = {
	#							is_core_of = ROOT
	#
	#							is_in_array = { ROOT.states_being_cored_formable = THIS }
	#							is_in_array = { ROOT.states_being_cored_normal = THIS }
	#						}
	#
	#						compliance > 40
	#
	#						OR = {
	#							any_neighbor_state = {
	#								is_core_of = ROOT
	#							}
	#
	#							is_neighboring_core_special_case_state = yes
	#						}
	#					}
	#				}
	#
	#				random_owned_controlled_state = {
	#					limit = {
	#						compliance > 40
	#
	#						OR = {
	#							any_neighbor_state = {
	#								is_core_of = ROOT
	#							}
	#
	#							is_neighboring_core_special_case_state = yes
	#						}
	#					}
	#
	#					add_to_array = { ROOT.states_being_cored_normal = THIS }
	#					ROOT = { add_political_power > -60 }
	#					subtract_from_variable = { ROOT.dynamic_pp_gain_modifier = 0.25 }
	#					set_variable = { ROOT.core_timer_@THIS = global.coring_length?60 }
	#				}
	#			}
	#
	#			# Then, increase compliance if we have little ponypower and states we can core.
	#			if = {
	#				limit = {
	#					has_political_power > 39
	#					num_of_civilian_factories_available_for_projects > 0
	#
	#					any_owned_state = {
	#						is_controlled_by = ROOT
	#
	#						OR = {
	#							set_temp_variable = { capital = ROOT.capital_scope }
	#							check_variable = { state_population_k > capital.state_population_k }
	#							arms_factory > 2
	#							industrial_complex > 3
	#						}
	#
	#						NOT = {
	#							is_core_of = ROOT
	#
	#							is_in_array = { ROOT.states_getting_compliance = THIS }
	#						}
	#
	#						if = {
	#							limit = {
	#								is_in_array = { ROOT.formable_cores = THIS }
	#							}
	#
	#							compliance < 20
	#						}
	#						else = {
	#							compliance < 40
	#
	#							OR = {
	#								any_neighbor_state = {
	#									is_core_of = ROOT
	#								}
	#
	#								is_neighboring_core_special_case_state = yes
	#							}
	#						}
	#					}
	#				}
	#
	#				random_owned_controlled_state = {
	#					limit = {
	#						is_controlled_by = ROOT
	#
	#						OR = {
	#							set_temp_variable = { capital = ROOT.capital_scope }
	#							check_variable = { state_population_k > capital.state_population_k }
	#							arms_factory > 2
	#							industrial_complex > 3
	#						}
	#
	#						NOT = {
	#							is_core_of = ROOT
	#
	#							is_in_array = { ROOT.states_getting_compliance = THIS }
	#						}
	#
	#						if = {
	#							limit = {
	#								is_in_array = { ROOT.formable_cores = THIS }
	#							}
	#
	#							compliance < 20
	#						}
	#						else = {
	#							compliance < 40
	#
	#							OR = {
	#								any_neighbor_state = {
	#									is_core_of = ROOT
	#								}
	#
	#								is_neighboring_core_special_case_state = yes
	#							}
	#						}
	#					}
	#
	#					add_to_array = { ROOT.states_getting_compliance = THIS }
	#					ROOT = { add_political_power = -40 }
	#					add_to_variable = { ROOT.dynamic_civ_factory_use = 1 }
	#					set_variable = { ROOT.compliance_timer_@THIS = global.compliance_length?30 }
	#				}
	#			}
	#
	#			# If there is nothing to core or get compliance on, let's fight. If we aren't already fighting.
	#			if = {
	#				limit = {
	#					OR = {
	#						has_war = no
	#						all_enemy_country = {
	#							NOT = { is_neighbor_of = ROOT }
	#						}
	#					}
	#					check_variable = { ROOT.states_being_claimed^num < 1 }
	#					num_divisions > 0
	#
	#					has_political_power > global.claiming_cost_minus_one?19
	#					political_power_daily > 0.1
	#				}
	#
	#				if = {
	#					limit = {
	#						any_neighbor_country = {
	#							NOT = {
	#								original_tag = OOO
	#								is_in_faction_with = ROOT
	#								has_non_aggression_pact_with = ROOT
	#								ROOT = { has_wargoal_against = PREV }
	#							}
	#
	#							any_owned_state = {
	#								OR = {
	#									has_global_flag = claiming_give_war_goals
	#									has_global_flag = claiming_declare_war
	#
	#									NOT = { is_claimed_by = ROOT }
	#								}
	#
	#								any_neighbor_state = {
	#									is_owned_by = ROOT
	#								}
	#							}
	#						}
	#					}
	#
	#					random_neighbor_country = {
	#						limit = {
	#							NOT = {
	#								original_tag = OOO
	#								is_in_faction_with = ROOT
	#								has_non_aggression_pact_with = ROOT
	#								ROOT = { has_wargoal_against = PREV }
	#							}
	#
	#							OR = {
	#								has_global_flag = claiming_give_war_goals
	#								has_global_flag = claiming_declare_war
	#
	#								NOT = { any_owned_state = { is_claimed_by = ROOT } }
	#							}
	#						}
	#
	#						random_owned_state = {
	#							limit = {
	#								OR = {
	#									has_global_flag = claiming_give_war_goals
	#									has_global_flag = claiming_declare_war
	#
	#									NOT = { is_claimed_by = ROOT }
	#								}
	#
	#								any_neighbor_state = {
	#									is_owned_by = ROOT
	#								}
	#							}
	#
	#							add_to_array = { ROOT.states_being_claimed = THIS }
	#							ROOT = { add_political_power = global.claiming_cost_negative?-20 }
	#							subtract_from_variable = { ROOT.dynamic_pp_gain_modifier = 0.1 }
	#							set_variable = { ROOT.claim_timer_@THIS = global.claiming_length?30 }
	#						}
	#					}
	#				}
	#				else_if = {
	#					limit = {
	#						any_country = {
	#							NOT = {
	#								original_tag = OOO
	#								is_in_faction_with = ROOT
	#								has_non_aggression_pact_with = ROOT
	#								ROOT = { has_wargoal_against = PREV }
	#							}
	#
	#							OR = {
	#								has_global_flag = claiming_give_war_goals
	#								has_global_flag = claiming_declare_war
	#
	#								NOT = { any_owned_state = { is_claimed_by = ROOT } }
	#							}
	#
	#							is_neighboring_ownership_special_case_country = yes
	#						}
	#					}
	#
	#					random_country = {
	#						limit = {
	#							NOT = {
	#								original_tag = OOO
	#								is_in_faction_with = ROOT
	#								has_non_aggression_pact_with = ROOT
	#								ROOT = { has_wargoal_against = PREV }
	#							}
	#
	#							OR = {
	#								has_global_flag = claiming_give_war_goals
	#								has_global_flag = claiming_declare_war
	#
	#								NOT = { any_owned_state = { is_claimed_by = ROOT } }
	#							}
	#
	#							is_neighboring_ownership_special_case_country = yes
	#						}
	#
	#						random_owned_state = {
	#							limit = {
	#								is_neighboring_ownership_special_case_state = yes
	#							}
	#
	#							add_to_array = { ROOT.states_being_claimed = THIS }
	#							ROOT = { add_political_power = global.claiming_cost_negative?-20 }
	#							subtract_from_variable = { ROOT.dynamic_pp_gain_modifier = 0.1 }
	#							set_variable = { ROOT.claim_timer_@THIS = global.claiming_length?30 }
	#						}
	#					}
	#				}
	#			}
	#		}
	#	}
	#}
}

