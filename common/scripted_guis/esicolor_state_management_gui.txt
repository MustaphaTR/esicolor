scripted_gui = {
	esicolor_state_action_category_gui = {
		context_type = selected_state_context
		parent_window_token = selected_state_view

		visible = {
			ROOT = { 
				NOT = {
					original_tag = OOO
					has_global_flag =  state_management_disabled
				}
			}
			THIS = {
				NOT = {
					is_owned_by = OOO
				}
			}
		}

		window_name = "esicolor_state_action_category_container"
	}

	esicolor_claim_button_clickable_gui = {
		context_type = selected_state_context
		parent_window_token = selected_state_view

		visible = {
			ROOT = {
				NOT = {
					original_tag = OOO
					has_global_flag =  state_management_disabled
				}

				has_political_power > global.claiming_cost_minus_one?19
				#political_power_daily > 0.1
			}
			THIS = {
				NOT = {
					if = {
						limit = { has_global_flag = claiming_give_war_goals }

						ROOT = {
							OR = {
								has_wargoal_against = PREV.owner
								has_war_with = PREV.owner
							}
						}
					}
					else_if = {
						limit = { has_global_flag = claiming_declare_war }

						ROOT = { has_war_with = PREV.owner }

						else = {
							is_claimed_by = ROOT
						}
					}

					is_in_array = { ROOT.states_being_claimed = THIS }
				}

				owner = {
					NOT = {
						original_tag = OOO
						tag = ROOT

						is_in_faction_with = ROOT
						has_non_aggression_pact_with = ROOT
						is_subject_of = ROOT
						is_subject_of = ROOT.overlord
						has_subject = ROOT
					}
				}

				OR = {
					any_neighbor_state = {
						is_controlled_by = ROOT
					}

					is_neighboring_control_special_case_state = yes
				}
			}
		}

		window_name = "esicolor_claim_button_clickable_window"

		effects = {
			esicolor_claim_button_clickable_click = {
				THIS = {
					if = {
						limit = { check_variable = { global.setup_fast_mode < 6 } }

						add_to_array = { ROOT.states_being_claimed = THIS }
					}
					else = {
						claim_action_effect = yes
					}
				}

				hidden_effect = {
					ROOT = {
						add_political_power = global.claiming_cost_negative?-20

						if = {
							limit = { check_variable = { global.setup_fast_mode < 6 } }

							subtract_from_variable = { ROOT.dynamic_pp_gain_modifier = 0.1 }
							#country_event = { id = esicolorstatemanagement.1 days = global.claiming_length?30 }
							set_variable = { ROOT.claim_timer_@PREV = global.claiming_length?30 }
						}
					}
				}
			}
		}

		ai_enabled = { always = yes }

		ai_test_interval = 168 # 1 week
		ai_test_variance = 0.25
		# ai_test_scopes = test_neighbouring_states # Would be nice to limit it, but we need them to check special case naval borders too.

		ai_check = {
			OR = {
				has_war = no
				all_enemy_country = {
					NOT = { is_neighbor_of = ROOT }
				}
			}
			is_subject = no
			num_divisions > 0
			political_power_daily > 0.1
			check_variable = { ROOT.states_being_claimed^num < 1 }
		}

		ai_check_scope = {
			# Prioritise real neighbours over special naval borders.
			OR = {
				any_neighbor_state = { is_controlled_by = ROOT }

				AND = {
					is_neighboring_control_special_case_state = yes
					ROOT = {
						NOT = {
							any_neighbor_country = {
								NOT = {
									original_tag = OOO
									is_in_faction_with = ROOT
									has_non_aggression_pact_with = ROOT
									ROOT = { has_wargoal_against = PREV }
								}

								any_owned_state = {
									OR = {
										has_global_flag = claiming_give_war_goals
										has_global_flag = claiming_declare_war

										NOT = { is_claimed_by = ROOT }
									}

									any_neighbor_state = {
										is_owned_by = ROOT
									}
								}
							}
						}
					}
				}
			}
		}

		ai_weights = {
			esicolor_claim_button_clickable_click = {
				ai_will_do = {
					base = 10
				}
			}
		}
	}

	esicolor_claim_button_timer_gui = {
		context_type = selected_state_context
		parent_window_token = selected_state_view

		visible = {
			THIS = {
				is_in_array = { ROOT.states_being_claimed = THIS }
			}
		}

		window_name = "esicolor_claim_button_timer"
	}

	esicolor_compliance_button_clickable_gui = {
		context_type = selected_state_context
		parent_window_token = selected_state_view

		visible = {
			ROOT = {
				NOT = {
					original_tag = OOO
					has_global_flag =  state_management_disabled
				}

				num_of_civilian_factories_available_for_projects > 0
				has_political_power > 39
			}
			THIS = {
				NOT = {
					is_core_of = ROOT

					is_in_array = { ROOT.states_getting_compliance = THIS }
				}
				compliance < 100
				owner = {
					tag = ROOT
				}
				controller = {
					tag = ROOT
				}
			}
		}

		window_name = "esicolor_compliance_button_clickable_window"

		effects = {
			esicolor_compliance_button_clickable_click = {
				THIS = {
					if = {
						limit = { check_variable = { global.setup_fast_mode < 6 } }

						add_to_array = { ROOT.states_getting_compliance = THIS }
					}
					else = {
						add_compliance = 10
					}
				}

				ROOT = {
					hidden_effect = {
						add_political_power = -40

						if = {
							limit = { check_variable = { global.setup_fast_mode < 6 } }

							add_to_variable = { ROOT.dynamic_civ_factory_use = 1 }
							#country_event = { id = esicolorstatemanagement.2 days = global.compliance_length?30 }
							set_variable = { ROOT.compliance_timer_@PREV = global.compliance_length?30 }
						}
					}
				}
			}
		}

		ai_enabled = { always = yes }

		ai_test_interval = 168 # 1 week
		ai_test_variance = 0.25
		ai_test_scopes = test_self_owned_states

		ai_check = {
			# If we have states we can core, don't increase compliance.
			NOT = {
				any_owned_state = {
					is_controlled_by = ROOT
					NOT = { is_core_of = ROOT }

				#	if = {
				#		limit = { is_in_array = { ROOT.formable_cores = THIS } }
				#
				#		compliance > 20
				#	}
				#	else = {
						compliance > 40

						OR = {
							any_neighbor_state = {
								is_core_of = ROOT
							}

							is_neighboring_core_special_case_state = yes
						}
				#	}
				}
			}
		}

		ai_check_scope = {
		#	if = {
		#		limit = { is_in_array = { ROOT.formable_cores = THIS } }
		#
		#		compliance < 20
		#	}
		#	else = {
				compliance < 40
		#	}
		}

		ai_weights = {
			esicolor_compliance_button_clickable_click = {
				ai_will_do = {
					base = 50

					# Focus on adjacent states to our cores.
					modifier = {
						factor = 0.2

						NOT = {
							any_neighbor_state = {
								is_core_of = ROOT
							}

							is_neighboring_core_special_case_state = yes
						}
					}

					# Focus on states with factories or high population.
					modifier = {
						factor = 1.1
						industrial_complex > 1
					}
					modifier = {
						factor = 1.1
						industrial_complex > 2
					}
					modifier = {
						factor = 1.1
						industrial_complex > 3
					}
					modifier = {
						factor = 1.1
						industrial_complex > 4
					}
					modifier = {
						factor = 1.1
						industrial_complex > 5
					}
					modifier = {
						factor = 1.1
						arms_factory > 1
					}
					modifier = {
						factor = 1.1
						arms_factory > 2
					}
					modifier = {
						factor = 1.1
						arms_factory > 3
					}
					modifier = {
						factor = 1.1
						arms_factory > 4
					}
					modifier = {
						factor = 1.1
						arms_factory > 5
					}
					modifier = {
						factor = 1.25

						set_temp_variable = { capital = FROM.capital_scope }
						check_variable = { state_population_k > capital.state_population_k }
					}
					modifier = {
						factor = 1.1
						state_population_k > 1000
					}
					modifier = {
						factor = 1.1
						state_population_k > 2000
					}
					modifier = {
						factor = 1.1
						state_population_k > 3000
					}
					modifier = {
						factor = 1.1
						state_population_k > 4000
					}
					modifier = {
						factor = 1.1
						state_population_k > 5000
					}

					# Focus on states that already have high compliance.
					modifier = {
						factor = 1.4

						compliance > 10
					}
					modifier = {
						factor = 1.4

						compliance > 20
					}
					modifier = {
						factor = 1.4

						compliance > 30
					}
				}
			}
		}
	}

	esicolor_compliance_button_timer_gui = {
		context_type = selected_state_context
		parent_window_token = selected_state_view

		visible = {
			THIS = {
				is_in_array = { ROOT.states_getting_compliance = THIS }
			}
		}

		window_name = "esicolor_compliance_button_timer"
	}

	esicolor_core_button_clickable_gui = {
		context_type = selected_state_context
		parent_window_token = selected_state_view

		visible = {
			ROOT = {
				NOT = {
					original_tag = OOO
					has_global_flag =  state_management_disabled
				}

				if = {
					limit = { is_in_array = { ROOT.formable_cores = PREV } }

					has_political_power > 29
					#political_power_daily > 0.125
				}
				else = {
					has_political_power > 59
					#political_power_daily > 0.25
				}
			}
			THIS = {
				NOT = {
					is_core_of = ROOT

					is_in_array = { ROOT.states_being_cored_normal = THIS }
					is_in_array = { ROOT.states_being_cored_formable = THIS }
				}
				owner = {
					tag = ROOT
				}
				controller = {
					tag = ROOT
				}
				if = {
					limit = { is_in_array = { ROOT.formable_cores = THIS } }

					compliance > 20
				}
				else = {
					compliance > 40

					OR = {
						any_neighbor_state = {
							is_core_of = ROOT
						}

						is_neighboring_core_special_case_state = yes
					}
				}
			}
		}

		window_name = "esicolor_core_button_clickable_window"

		effects = {
			esicolor_core_button_clickable_click = {
				THIS = {
					if = {
						limit = { check_variable = { global.setup_fast_mode < 6 } }

						if = {
							limit = { is_in_array = { ROOT.formable_cores = THIS } }

							add_to_array = { ROOT.states_being_cored_formable = THIS }
						}
						else = {
							add_to_array = { ROOT.states_being_cored_normal = THIS }
						}
					}
					else = {
						add_core_of = ROOT
					}
				}

				ROOT = {
					hidden_effect = {
						if = {
							limit = { is_in_array = { ROOT.formable_cores = PREV } }

							add_political_power = -30

							if = {
								limit = { check_variable = { global.setup_fast_mode < 6 } }

								subtract_from_variable = { ROOT.dynamic_pp_gain_modifier = 0.125 }
								#country_event = { id = esicolorstatemanagement.4 days = global.coring_formable_length?30 }
								set_variable = { ROOT.core_timer_@PREV = global.coring_formable_length?30 }
							}
						}
						else = {
							add_political_power = -60

							if = {
								limit = { check_variable = { global.setup_fast_mode < 6 } }

								subtract_from_variable = { ROOT.dynamic_pp_gain_modifier = 0.25 }
								#country_event = { id = esicolorstatemanagement.3 days = global.coring_length?60 }
								set_variable = { ROOT.core_timer_@PREV = global.coring_length?60 }
							}
						}
					}
				}
			}
		}

		ai_enabled = { always = yes }

		ai_test_interval = 168 # 1 week
		ai_test_variance = 0.25
		ai_test_scopes = test_self_owned_states

		ai_check = {
			# has_states_to_form_lv2_or_lv3_formable = no

			#if = {
			#	limit = { is_in_array = { ROOT.formable_cores = THIS } }
			#
			#	political_power_daily > 0.125
			#}
			#else = {
				political_power_daily > 0.25
			#}
		}

		#ai_check_scope = {
		#	# Prioritise formable states.
		#	OR = {
		#		limit = { is_in_array = { ROOT.formable_cores = THIS } }
		#		ROOT = {
		#			NOT = {
		#				any_owned_state = {
		#					is_controlled_by = THIS
		#					is_in_array = { ROOT.formable_cores = THIS }
		#					compliance > 20
		#				}
		#			}
		#		}
		#	}
		#}

		ai_weights = {
			esicolor_core_button_clickable_click = {
				ai_will_do = {
					base = 100

					# Focus on states with factories or high population.
					modifier = {
						factor = 1.1
						industrial_complex > 1
					}
					modifier = {
						factor = 1.1
						industrial_complex > 2
					}
					modifier = {
						factor = 1.1
						industrial_complex > 3
					}
					modifier = {
						factor = 1.1
						industrial_complex > 4
					}
					modifier = {
						factor = 1.1
						industrial_complex > 5
					}
					modifier = {
						factor = 1.1
						arms_factory > 1
					}
					modifier = {
						factor = 1.1
						arms_factory > 2
					}
					modifier = {
						factor = 1.1
						arms_factory > 3
					}
					modifier = {
						factor = 1.1
						arms_factory > 4
					}
					modifier = {
						factor = 1.1
						arms_factory > 5
					}
					modifier = {
						factor = 1.25

						set_temp_variable = { capital = FROM.capital_scope }
						check_variable = { state_population_k > capital.state_population_k }
					}
					modifier = {
						factor = 1.1
						state_population_k > 1000
					}
					modifier = {
						factor = 1.1
						state_population_k > 2000
					}
					modifier = {
						factor = 1.1
						state_population_k > 3000
					}
					modifier = {
						factor = 1.1
						state_population_k > 4000
					}
					modifier = {
						factor = 1.1
						state_population_k > 5000
					}
				}
			}
		}
	}

	esicolor_core_button_timer_gui = {
		context_type = selected_state_context
		parent_window_token = selected_state_view

		visible = {
			THIS = {
				OR = {
					is_in_array = { ROOT.states_being_cored_formable = THIS }
					is_in_array = { ROOT.states_being_cored_normal = THIS }
				}
			}
		}

		window_name = "esicolor_core_button_timer"
	}
}
